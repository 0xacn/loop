{
  "swagger": "2.0",
  "info": {
    "title": "client.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/loop/in": {
      "post": {
        "summary": "* loop: `in`\nLoopIn initiates a loop in swap with the given parameters. The call\nreturns after the swap has been set up with the swap server. From that\npoint onwards, progress can be tracked via the SwapStatus stream\nthat is returned from Monitor().",
        "operationId": "LoopIn",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/looprpcSwapResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/looprpcLoopInRequest"
            }
          }
        ],
        "tags": [
          "SwapClient"
        ]
      }
    },
    "/v1/loop/in/quote/{amt}": {
      "get": {
        "summary": "* loop: `quote`\nGetQuote returns a quote for a swap with the provided parameters.",
        "operationId": "GetLoopInQuote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/looprpcQuoteResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "amt",
            "description": "*\nThe amount to swap in satoshis.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "conf_target",
            "description": "*\nThe confirmation target that should be used either for the sweep of the\non-chain HTLC broadcast by the swap server in the case of a Loop Out, or for\nthe confirmation of the on-chain HTLC broadcast by the swap client in the\ncase of a Loop In.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "external_htlc",
            "description": "*\nIf external_htlc is true, we expect the htlc to be published by an external\nactor.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "swap_publication_deadline",
            "description": "*\nThe latest time (in unix seconds) we allow the server to wait before\npublishing the HTLC on chain. Setting this to a larger value will give the\nserver the opportunity to batch multiple swaps together, and wait for\nlow-fee periods before publishing the HTLC, potentially resulting in a\nlower total swap fee.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "SwapClient"
        ]
      }
    },
    "/v1/loop/in/terms": {
      "get": {
        "summary": "* loop: `terms`\nGetTerms returns the terms that the server enforces for swaps.",
        "operationId": "GetLoopInTerms",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/looprpcTermsResponse"
            }
          }
        },
        "tags": [
          "SwapClient"
        ]
      }
    },
    "/v1/loop/monitor": {
      "get": {
        "summary": "* loop: `monitor`\nMonitor will return a stream of swap updates for currently active swaps.",
        "operationId": "Monitor",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/looprpcSwapStatus"
            }
          }
        },
        "tags": [
          "SwapClient"
        ]
      }
    },
    "/v1/loop/out": {
      "post": {
        "summary": "* loop: `out`\nLoopOut initiates an loop out swap with the given parameters. The call\nreturns after the swap has been set up with the swap server. From that\npoint onwards, progress can be tracked via the SwapStatus stream that is\nreturned from Monitor().",
        "operationId": "LoopOut",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/looprpcSwapResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/looprpcLoopOutRequest"
            }
          }
        ],
        "tags": [
          "SwapClient"
        ]
      }
    },
    "/v1/loop/out/quote/{amt}": {
      "get": {
        "summary": "* loop: `quote`\nLoopOutQuote returns a quote for a loop out swap with the provided\nparameters.",
        "operationId": "LoopOutQuote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/looprpcQuoteResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "amt",
            "description": "*\nThe amount to swap in satoshis.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "conf_target",
            "description": "*\nThe confirmation target that should be used either for the sweep of the\non-chain HTLC broadcast by the swap server in the case of a Loop Out, or for\nthe confirmation of the on-chain HTLC broadcast by the swap client in the\ncase of a Loop In.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "external_htlc",
            "description": "*\nIf external_htlc is true, we expect the htlc to be published by an external\nactor.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "swap_publication_deadline",
            "description": "*\nThe latest time (in unix seconds) we allow the server to wait before\npublishing the HTLC on chain. Setting this to a larger value will give the\nserver the opportunity to batch multiple swaps together, and wait for\nlow-fee periods before publishing the HTLC, potentially resulting in a\nlower total swap fee.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "SwapClient"
        ]
      }
    },
    "/v1/loop/out/terms": {
      "get": {
        "summary": "* loop: `terms`\nLoopOutTerms returns the terms that the server enforces for a loop out swap.",
        "operationId": "LoopOutTerms",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/looprpcTermsResponse"
            }
          }
        },
        "tags": [
          "SwapClient"
        ]
      }
    },
    "/v1/loop/swap/{id}": {
      "get": {
        "summary": "* loop: `swapinfo`\nSwapInfo returns all known details about a single swap.",
        "operationId": "SwapInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/looprpcSwapStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "*\nThe swap identifier which currently is the hash that locks the HTLCs. When\nusing REST, this field must be encoded as base64.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "SwapClient"
        ]
      }
    },
    "/v1/loop/swaps": {
      "get": {
        "summary": "* loop: `listswaps`\nListSwaps returns a list of all currently known swaps and their current\nstatus.",
        "operationId": "ListSwaps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/looprpcListSwapsResponse"
            }
          }
        },
        "tags": [
          "SwapClient"
        ]
      }
    },
    "/v1/lsat/tokens": {
      "get": {
        "summary": "* loop: `listauth`\nGetLsatTokens returns all LSAT tokens the daemon ever paid for.",
        "operationId": "GetLsatTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/looprpcTokensResponse"
            }
          }
        },
        "tags": [
          "SwapClient"
        ]
      }
    }
  },
  "definitions": {
    "looprpcListSwapsResponse": {
      "type": "object",
      "properties": {
        "swaps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/looprpcSwapStatus"
          },
          "description": "*\nThe list of all currently known swaps and their status."
        }
      }
    },
    "looprpcLoopInRequest": {
      "type": "object",
      "properties": {
        "amt": {
          "type": "string",
          "format": "int64",
          "description": "*\nRequested swap amount in sat. This does not include the swap and miner \nfee."
        },
        "max_swap_fee": {
          "type": "string",
          "format": "int64",
          "description": "*\nMaximum we are willing to pay the server for the swap. This value is not\ndisclosed in the swap initiation call, but if the server asks for a\nhigher fee, we abort the swap. Typically this value is taken from the\nresponse of the GetQuote call."
        },
        "max_miner_fee": {
          "type": "string",
          "format": "int64",
          "description": "*\nMaximum in on-chain fees that we are willing to spent. If we want to\npublish the on-chain htlc and the fee estimate turns out higher than this\nvalue, we cancel the swap. \n\nmax_miner_fee is typically taken from the response of the GetQuote call."
        },
        "last_hop": {
          "type": "string",
          "format": "byte",
          "description": "*\nThe last hop to use for the loop in swap. If empty, the last hop is selected\nbased on the lowest routing fee for the swap payment from the server."
        },
        "external_htlc": {
          "type": "boolean",
          "format": "boolean",
          "description": "*\nIf external_htlc is true, we expect the htlc to be published by an external\nactor."
        }
      }
    },
    "looprpcLoopOutRequest": {
      "type": "object",
      "properties": {
        "amt": {
          "type": "string",
          "format": "int64",
          "description": "*\nRequested swap amount in sat. This does not include the swap and miner fee."
        },
        "dest": {
          "type": "string",
          "description": "*\nBase58 encoded destination address for the swap."
        },
        "max_swap_routing_fee": {
          "type": "string",
          "format": "int64",
          "description": "*\nMaximum off-chain fee in msat that may be paid for payment to the server.\nThis limit is applied during path finding. Typically this value is taken\nfrom the response of the GetQuote call."
        },
        "max_prepay_routing_fee": {
          "type": "string",
          "format": "int64",
          "description": "*\nMaximum off-chain fee in msat that may be paid for payment to the server.\nThis limit is applied during path finding. Typically this value is taken\nfrom the response of the GetQuote call."
        },
        "max_swap_fee": {
          "type": "string",
          "format": "int64",
          "description": "*\nMaximum we are willing to pay the server for the swap. This value is not\ndisclosed in the swap initiation call, but if the server asks for a\nhigher fee, we abort the swap. Typically this value is taken from the\nresponse of the GetQuote call. It includes the prepay amount."
        },
        "max_prepay_amt": {
          "type": "string",
          "format": "int64",
          "description": "*\nMaximum amount of the swap fee that may be charged as a prepayment."
        },
        "max_miner_fee": {
          "type": "string",
          "format": "int64",
          "description": "*\nMaximum in on-chain fees that we are willing to spent. If we want to\nsweep the on-chain htlc and the fee estimate turns out higher than this\nvalue, we cancel the swap. If the fee estimate is lower, we publish the\nsweep tx.\n\nIf the sweep tx is not confirmed, we are forced to ratchet up fees until it\nis swept. Possibly even exceeding max_miner_fee if we get close to the htlc\ntimeout. Because the initial publication revealed the preimage, we have no\nother choice. The server may already have pulled the off-chain htlc. Only\nwhen the fee becomes higher than the swap amount, we can only wait for fees\nto come down and hope - if we are past the timeout - that the server is not\npublishing the revocation.\n\nmax_miner_fee is typically taken from the response of the GetQuote call."
        },
        "loop_out_channel": {
          "type": "string",
          "format": "uint64",
          "description": "*\nThe channel to loop out, the channel to loop out is selected based on the\nlowest routing fee for the swap payment to the server."
        },
        "sweep_conf_target": {
          "type": "integer",
          "format": "int32",
          "description": "*\nThe number of blocks from the on-chain HTLC's confirmation height that it\nshould be swept within."
        },
        "swap_publication_deadline": {
          "type": "string",
          "format": "uint64",
          "description": "*\nThe latest time (in unix seconds) we allow the server to wait before\npublishing the HTLC on chain. Setting this to a larger value will give the\nserver the opportunity to batch multiple swaps together, and wait for\nlow-fee periods before publishing the HTLC, potentially resulting in a\nlower total swap fee."
        }
      }
    },
    "looprpcLsatToken": {
      "type": "object",
      "properties": {
        "base_macaroon": {
          "type": "string",
          "format": "byte",
          "description": "*\nThe base macaroon that was baked by the auth server."
        },
        "payment_hash": {
          "type": "string",
          "format": "byte",
          "description": "*\nThe payment hash of the payment that was paid to obtain the token."
        },
        "payment_preimage": {
          "type": "string",
          "format": "byte",
          "description": "*\nThe preimage of the payment hash, knowledge of this is proof that the\npayment has been paid. If the preimage is set to all zeros, this means the\npayment is still pending and the token is not yet fully valid."
        },
        "amount_paid_msat": {
          "type": "string",
          "format": "int64",
          "description": "*\nThe amount of millisatoshis that was paid to get the token."
        },
        "routing_fee_paid_msat": {
          "type": "string",
          "format": "int64",
          "description": "*\nThe amount of millisatoshis paid in routing fee to pay for the token."
        },
        "time_created": {
          "type": "string",
          "format": "int64",
          "description": "*\nThe creation time of the token as UNIX timestamp in seconds."
        },
        "expired": {
          "type": "boolean",
          "format": "boolean",
          "description": "*\nIndicates whether the token is expired or still valid."
        },
        "storage_name": {
          "type": "string",
          "description": "*\nIdentifying attribute of this token in the store. Currently represents the\nfile name of the token where it's stored on the file system."
        }
      }
    },
    "looprpcQuoteResponse": {
      "type": "object",
      "properties": {
        "swap_fee": {
          "type": "string",
          "format": "int64",
          "description": "*\nThe fee that the swap server is charging for the swap."
        },
        "prepay_amt": {
          "type": "string",
          "format": "int64",
          "description": "*\nThe part of the swap fee that is requested as a prepayment."
        },
        "miner_fee": {
          "type": "string",
          "format": "int64",
          "description": "*\nAn estimate of the on-chain fee that needs to be paid to sweep the HTLC."
        },
        "swap_payment_dest": {
          "type": "string",
          "format": "byte",
          "description": "*\nThe node pubkey where the swap payment needs to be paid\nto. This can be used to test connectivity before initiating the swap."
        },
        "cltv_delta": {
          "type": "integer",
          "format": "int32",
          "title": "*\nOn-chain cltv expiry delta"
        }
      }
    },
    "looprpcSwapResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "*\nSwap identifier to track status in the update stream that is returned from\nthe Start() call. Currently this is the hash that locks the htlcs.\nDEPRECATED: To make the API more consistent, this field is deprecated in\nfavor of id_bytes and will be removed in a future release."
        },
        "id_bytes": {
          "type": "string",
          "format": "byte",
          "description": "*\nSwap identifier to track status in the update stream that is returned from\nthe Start() call. Currently this is the hash that locks the htlcs."
        },
        "htlc_address": {
          "type": "string",
          "description": "*\nThe address of the on-chain htlc."
        }
      }
    },
    "looprpcSwapState": {
      "type": "string",
      "enum": [
        "INITIATED",
        "PREIMAGE_REVEALED",
        "HTLC_PUBLISHED",
        "SUCCESS",
        "FAILED",
        "INVOICE_SETTLED"
      ],
      "default": "INITIATED",
      "description": " - INITIATED: *\nINITIATED is the initial state of a swap. At that point, the initiation\ncall to the server has been made and the payment process has been started\nfor the swap and prepayment invoices.\n - PREIMAGE_REVEALED: *\nPREIMAGE_REVEALED is reached when the sweep tx publication is first\nattempted. From that point on, we should consider the preimage to no\nlonger be secret and we need to do all we can to get the sweep confirmed.\nThis state will mostly coalesce with StateHtlcConfirmed, except in the\ncase where we wait for fees to come down before we sweep.\n - HTLC_PUBLISHED: *\nHTLC_PUBLISHED is reached when the htlc tx has been published in a loop in\nswap.\n - SUCCESS: *\nSUCCESS is the final swap state that is reached when the sweep tx has\nthe required confirmation depth.\n - FAILED: *\nFAILED is the final swap state for a failed swap with or without loss of\nthe swap amount.\n - INVOICE_SETTLED: *\nINVOICE_SETTLED is reached when the swap invoice in a loop in swap has been\npaid, but we are still waiting for the htlc spend to confirm."
    },
    "looprpcSwapStatus": {
      "type": "object",
      "properties": {
        "amt": {
          "type": "string",
          "format": "int64",
          "description": "*\nRequested swap amount in sat. This does not include the swap and miner\nfee."
        },
        "id": {
          "type": "string",
          "description": "*\nSwap identifier to track status in the update stream that is returned from\nthe Start() call. Currently this is the hash that locks the htlcs.\nDEPRECATED: To make the API more consistent, this field is deprecated in\nfavor of id_bytes and will be removed in a future release."
        },
        "id_bytes": {
          "type": "string",
          "format": "byte",
          "description": "*\nSwap identifier to track status in the update stream that is returned from\nthe Start() call. Currently this is the hash that locks the htlcs."
        },
        "type": {
          "$ref": "#/definitions/looprpcSwapType",
          "title": "*\nSwap type"
        },
        "state": {
          "$ref": "#/definitions/looprpcSwapState",
          "description": "*\nState the swap is currently in, see State enum."
        },
        "initiation_time": {
          "type": "string",
          "format": "int64",
          "description": "*\nInitiation time of the swap."
        },
        "last_update_time": {
          "type": "string",
          "format": "int64",
          "description": "*\nInitiation time of the swap."
        },
        "htlc_address": {
          "type": "string",
          "description": "*\nHtlc address."
        },
        "cost_server": {
          "type": "string",
          "format": "int64",
          "title": "/ Swap server cost"
        },
        "cost_onchain": {
          "type": "string",
          "format": "int64",
          "title": "On-chain transaction cost"
        },
        "cost_offchain": {
          "type": "string",
          "format": "int64",
          "title": "Off-chain routing fees"
        }
      }
    },
    "looprpcSwapType": {
      "type": "string",
      "enum": [
        "LOOP_OUT",
        "LOOP_IN"
      ],
      "default": "LOOP_OUT",
      "title": "- LOOP_OUT: LOOP_OUT indicates an loop out swap (off-chain to on-chain)\n - LOOP_IN: LOOP_IN indicates a loop in swap (on-chain to off-chain)"
    },
    "looprpcTermsResponse": {
      "type": "object",
      "properties": {
        "min_swap_amount": {
          "type": "string",
          "format": "int64",
          "title": "*\nMinimum swap amount (sat)"
        },
        "max_swap_amount": {
          "type": "string",
          "format": "int64",
          "title": "*\nMaximum swap amount (sat)"
        }
      }
    },
    "looprpcTokensResponse": {
      "type": "object",
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/looprpcLsatToken"
          },
          "description": "*\nList of all tokens the daemon knows of, including old/expired tokens."
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "x-stream-definitions": {
    "looprpcSwapStatus": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/looprpcSwapStatus"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of looprpcSwapStatus"
    }
  }
}
